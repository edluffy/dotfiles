call plug#begin('~/.vim/plugged')

Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/goyo.vim', {'for': ['markdown', 'tex']}

Plug 'Raimondi/delimitMate'
Plug 'sheerun/vim-polyglot'
Plug 'pgdouyon/vim-accio'

Plug 'maralla/completor.vim'

call plug#end()


" Theming
let g:material_theme_style = 'palenight'
colorscheme material

" Completor
if executable('clangd')
	let g:completor_filetype_map = {}
	let g:completor_filetype_map.cpp = {'ft': 'lsp', 'cmd': 'clangd'}
	let g:completor_filetype_map.c = {'ft': 'lsp', 'cmd': 'clangd'}
endif " (fallback to libclang completion)

" Accio
au BufEnter * call FixSigns()
function FixSigns()
        sign define AccioError text=!! texthl=WarningMsg
        sign define AccioWarning text=!! texthl=Todo
endfunc

au Filetype c,cpp au BufWrite * exec ':Accio gcc make clean ; make'
map qq :Accio gcc make upload<cr>

" Custom Status Line
set statusline+=%<\ %f\ %m%r%y%w%=%l\/%-6L\ %3c
set statusline+=%{ListJobs()}\ \ %{accio#statusline('Errors:\ %d')}
function ListJobs()
	let n=0 | for i in job_info() | let n+=1 | endfor | return "     Jobs: ".n
endfunc

" Sensible defaults for writing text
filetype plugin indent on
set autoindent
set backspace=indent,eol,start
set smarttab
set clipboard^=unnamed
set completeopt-=preview
set completeopt+=menuone,noselect
set signcolumn=yes
set shortmess+=c
match WarningMsg /\%>80c/

" Sensible defaults for UI appearance
syntax enable
set termguicolors
set laststatus=2
set number
set ruler
set wildmenu
set splitright

" Tweaks to speed up vim
set nottyfast
set lazyredraw
set synmaxcol=180

" FZF Settings
let g:fzf_height=15
map ee :FZF ~<cr>
map rr :FZF <cr>
"map ff :Lines <cr>

" Splits
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
