call plug#begin('~/.vim/plugged')

Plug 'lotabout/skim', { 'dir': '~/.skim', 'do': './install' }
Plug 'urbainvaes/vim-tmux-pilot'
Plug 'Raimondi/delimitMate'

Plug 'sheerun/vim-polyglot'
Plug 'pgdouyon/vim-accio'
Plug 'maralla/completor.vim'

Plug 'junegunn/goyo.vim', {'for': ['markdown', 'tex']}

call plug#end()

let g:skim_height=15

" Completor settings
let g:completor_completion_delay = 300
let g:completor_complete_options = 'menuone,noselect,preview'
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<cr>"
noremap <c-]> :call completor#do('definition')<CR>

" Theming
let g:material_theme_style = 'palenight'
colorscheme material

set completeopt+=menuone,noselect
set shortmess+=c

au BufEnter * call FixSigns()
function FixSigns()
	sign define AccioError text=!! texthl=WarningMsg
	sign define AccioWarning text=!! texthl=Todo
endfunc

" Run make on save
au Filetype c,cpp au BufWrite * exec ':Accio gcc make clean ; make'
map qq :Accio gcc make upload<cr>


" Custom Status Line
set statusline+=%<\ %f\ %m%r%y%w%=%l\/%-6L\ %3c
set statusline+=%{ListJobs()}\ \ %{accio#statusline('Errors:\ %d')}

function ListJobs()
	let n=0 | for i in job_info() | let n+=1 | endfor | return "     Jobs: ".n
endfunc

" Sensible defaults for writing text
filetype plugin indent on
set autoindent
set backspace=indent,eol,start
set smarttab
set clipboard^=unnamed
set completeopt-=preview
set signcolumn=yes

" Sensible defaults for UI appearance
syntax enable
set termguicolors
set laststatus=2
set number
set ruler
set wildmenu
set splitright

" Tweaks to speed up vim
set nottyfast
set lazyredraw
set synmaxcol=180

" FZF Mappings
map ee :SK ~<cr>
map rr :SK <cr>
"map ff :Lines <cr>
